<?php

namespace Proxies\__CG__\gospelcenter\PageBundle\Entity;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class Page extends \gospelcenter\PageBundle\Entity\Page implements \Doctrine\ORM\Proxy\Proxy
{
    private $_entityPersister;
    private $_identifier;
    public $__isInitialized__ = false;
    public function __construct($entityPersister, $identifier)
    {
        $this->_entityPersister = $entityPersister;
        $this->_identifier = $identifier;
    }
    /** @private */
    public function __load()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;

            if (method_exists($this, "__wakeup")) {
                // call this after __isInitialized__to avoid infinite recursion
                // but before loading to emulate what ClassMetadata::newInstance()
                // provides.
                $this->__wakeup();
            }

            if ($this->_entityPersister->load($this->_identifier, $this) === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            unset($this->_entityPersister, $this->_identifier);
        }
    }

    /** @private */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int) $this->_identifier["id"];
        }
        $this->__load();
        return parent::getId();
    }

    public function setRef($ref)
    {
        $this->__load();
        return parent::setRef($ref);
    }

    public function getRef()
    {
        $this->__load();
        return parent::getRef();
    }

    public function setTitle($title)
    {
        $this->__load();
        return parent::setTitle($title);
    }

    public function getTitle()
    {
        $this->__load();
        return parent::getTitle();
    }

    public function setSlogan($slogan)
    {
        $this->__load();
        return parent::setSlogan($slogan);
    }

    public function getSlogan()
    {
        $this->__load();
        return parent::getSlogan();
    }

    public function setTemplate($template)
    {
        $this->__load();
        return parent::setTemplate($template);
    }

    public function getTemplate()
    {
        $this->__load();
        return parent::getTemplate();
    }

    public function setModifiedDate($modifiedDate)
    {
        $this->__load();
        return parent::setModifiedDate($modifiedDate);
    }

    public function getModifiedDate()
    {
        $this->__load();
        return parent::getModifiedDate();
    }

    public function setCenter(\gospelcenter\CenterBundle\Entity\Center $center)
    {
        $this->__load();
        return parent::setCenter($center);
    }

    public function getCenter()
    {
        $this->__load();
        return parent::getCenter();
    }

    public function addSlide(\gospelcenter\PageBundle\Entity\Slide $slides)
    {
        $this->__load();
        return parent::addSlide($slides);
    }

    public function removeSlide(\gospelcenter\PageBundle\Entity\Slide $slides)
    {
        $this->__load();
        return parent::removeSlide($slides);
    }

    public function getSlides()
    {
        $this->__load();
        return parent::getSlides();
    }

    public function setLanguage(\gospelcenter\LanguageBundle\Entity\Language $language = NULL)
    {
        $this->__load();
        return parent::setLanguage($language);
    }

    public function getLanguage()
    {
        $this->__load();
        return parent::getLanguage();
    }


    public function __sleep()
    {
        return array('__isInitialized__', 'id', 'ref', 'title', 'slogan', 'template', 'modifiedDate', 'center', 'slides', 'language');
    }

    public function __clone()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            $class = $this->_entityPersister->getClassMetadata();
            $original = $this->_entityPersister->load($this->_identifier);
            if ($original === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            foreach ($class->reflFields as $field => $reflProperty) {
                $reflProperty->setValue($this, $reflProperty->getValue($original));
            }
            unset($this->_entityPersister, $this->_identifier);
        }
        
    }
}