<?php

namespace Proxies\__CG__\gospelcenter\CenterBundle\Entity;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class Band extends \gospelcenter\CenterBundle\Entity\Band implements \Doctrine\ORM\Proxy\Proxy
{
    private $_entityPersister;
    private $_identifier;
    public $__isInitialized__ = false;
    public function __construct($entityPersister, $identifier)
    {
        $this->_entityPersister = $entityPersister;
        $this->_identifier = $identifier;
    }
    /** @private */
    public function __load()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;

            if (method_exists($this, "__wakeup")) {
                // call this after __isInitialized__to avoid infinite recursion
                // but before loading to emulate what ClassMetadata::newInstance()
                // provides.
                $this->__wakeup();
            }

            if ($this->_entityPersister->load($this->_identifier, $this) === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            unset($this->_entityPersister, $this->_identifier);
        }
    }

    /** @private */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int) $this->_identifier["id"];
        }
        $this->__load();
        return parent::getId();
    }

    public function setTitle($title)
    {
        $this->__load();
        return parent::setTitle($title);
    }

    public function getTitle()
    {
        $this->__load();
        return parent::getTitle();
    }

    public function setCenter(\gospelcenter\CenterBundle\Entity\Center $center = NULL)
    {
        $this->__load();
        return parent::setCenter($center);
    }

    public function getCenter()
    {
        $this->__load();
        return parent::getCenter();
    }

    public function addRole(\gospelcenter\PeopleBundle\Entity\Role $roles)
    {
        $this->__load();
        return parent::addRole($roles);
    }

    public function removeRole(\gospelcenter\PeopleBundle\Entity\Role $roles)
    {
        $this->__load();
        return parent::removeRole($roles);
    }

    public function getRoles()
    {
        $this->__load();
        return parent::getRoles();
    }

    public function addMember(\gospelcenter\PeopleBundle\Entity\Person $members)
    {
        $this->__load();
        return parent::addMember($members);
    }

    public function removeMember(\gospelcenter\PeopleBundle\Entity\Person $members)
    {
        $this->__load();
        return parent::removeMember($members);
    }

    public function getMembers()
    {
        $this->__load();
        return parent::getMembers();
    }

    public function addManager(\gospelcenter\PeopleBundle\Entity\Person $managers)
    {
        $this->__load();
        return parent::addManager($managers);
    }

    public function removeManager(\gospelcenter\PeopleBundle\Entity\Person $managers)
    {
        $this->__load();
        return parent::removeManager($managers);
    }

    public function getManagers()
    {
        $this->__load();
        return parent::getManagers();
    }


    public function __sleep()
    {
        return array('__isInitialized__', 'id', 'title', 'center', 'roles', 'members', 'managers');
    }

    public function __clone()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            $class = $this->_entityPersister->getClassMetadata();
            $original = $this->_entityPersister->load($this->_identifier);
            if ($original === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            foreach ($class->reflFields as $field => $reflProperty) {
                $reflProperty->setValue($this, $reflProperty->getValue($original));
            }
            unset($this->_entityPersister, $this->_identifier);
        }
        
    }
}