<?php

namespace gospelcenter\ImageBundle\Entity;

use Doctrine\ORM\Mapping as ORM;
use Symfony\Component\Validator\Constraints as Assert;

use Symfony\Component\HttpFoundation\File\UploadedFile;

/**
 * Image
 *
 * @ORM\Table(name="image")
 * @ORM\Entity(repositoryClass="gospelcenter\ImageBundle\Entity\ImageRepository")
 * @ORM\HasLifecycleCallbacks
 */
class Image
{
    /**
     * @var integer
     *
     * @ORM\Column(name="id", type="integer")
     * @ORM\Id
     * @ORM\GeneratedValue(strategy="AUTO")
     */
    private $id;

    /**
     * @var string
     *
     * @ORM\Column(name="title", type="string", length=255)
     * @Assert\NotBlank(message="Please enter a title.")
     */
    private $title;
    
    /**
     * @var string
     *
     * @ORM\Column(name="alt", type="string", length=255)
     */
    private $alt;

    /**
     * @var string
     *
     * @ORM\Column(name="type", type="string", length=255)
     * @Assert\NotBlank(message="Please select a type.")
     */
    private $type;
    
    /**
     * @var string
     *
     * @ORM\Column(name="originalName", type="string", length=255)
     */
    private $originalName;
    
    /**
     * @var string
     *
     * @ORM\Column(name="extension", type="string", length=255)
     */
    private $extension;
    
    /**
     * @var string
     *
     * @ORM\Column(name="description", type="text", nullable=true)
     */
    private $description;
    
    /**
     * @var \DateTime
     *
     * @ORM\Column(name="createdDate", type="datetime")
     * @Assert\DateTime()
     */
    private $createdDate;
    
    /**
     * @var \DateTime
     *
     * @ORM\Column(name="modifiedDate", type="datetime")
     * @Assert\DateTime()
     */
    private $modifiedDate;
    
    /**
     * @Assert\Image()
     */
    private $file;
    
    
    private $tempFilename;
    
    
    /**
     * shows
     * 
     * @ORM\OneToMany(targetEntity="gospelcenter\PeopleBundle\Entity\Person", mappedBy="image")
     * @Assert\Valid()
     */
    private $persons;
    
    
    /**
     * images
     * 
     * @ORM\OneToMany(targetEntity="gospelcenter\CelebrationBundle\Entity\Celebration", mappedBy="image", cascade={"detach"})
     * @Assert\Valid()
     */
    private $celebrations;
    
    
    /**
     * describes
     * 
     * @ORM\OneToOne(targetEntity="gospelcenter\CenterBundle\Entity\Center", mappedBy="image")
     * @Assert\Valid()
     */
    private $center;
    
    
    /**
     * is bublished by
     * 
     * @ORM\ManyToOne(targetEntity="gospelcenter\CenterBundle\Entity\Center", inversedBy="images")
     * @Assert\Valid()
     */
    private $centerCreator;
    
    
    /**
     * is contained by
     * 
     * @ORM\OneToMany(targetEntity="gospelcenter\ArticleBundle\Entity\Article", mappedBy="image")
     * @Assert\Valid()
     */
    private $articles;
    
    
    /**
     * illustrates
     * 
     * @ORM\OneToMany(targetEntity="gospelcenter\EventBundle\Entity\Event", mappedBy="picture")
     * @Assert\Valid()
     */
    private $eventsPicture;
    
    
    /**
     * covers
     * 
     * @ORM\OneToMany(targetEntity="gospelcenter\EventBundle\Entity\Event", mappedBy="cover")
     * @Assert\Valid()
     */
    private $eventsCover;
    
     
    /**
     * is used by
     * 
     * @ORM\OneToMany(targetEntity="gospelcenter\PageBundle\Entity\Slide", mappedBy="image")
     * @Assert\Valid()
     */
    private $slides;

    /**
     * displays
     *
     * @ORM\OneToMany(targetEntity="gospelcenter\ArticleBundle\Entity\Ad", mappedBy="image")
     * @Assert\Valid()
     */
    private $ads;
    
    /**
     * Constructor
     */
    public function __construct()
    {
        $this->createdDate = new \Datetime();
        $this->modifiedDate = new \Datetime();
        $this->eventsPicture = new \Doctrine\Common\Collections\ArrayCollection();
        $this->eventsCover = new \Doctrine\Common\Collections\ArrayCollection();
        $this->slides = new \Doctrine\Common\Collections\ArrayCollection();
        $this->persons = new \Doctrine\Common\Collections\ArrayCollection();
        $this->celebrations = new \Doctrine\Common\Collections\ArrayCollection();
        $this->articles = new \Doctrine\Common\Collections\ArrayCollection();
        $this->ads = new \Doctrine\Common\Collections\ArrayCollection();
    }
    
    
    public function setFile(UploadedFile $file)
    {
        $this->file = $file;
        
        if($this->extension !== null) {
            $this->tempFilename = $this->extension;
            
            $this->extension = null;
            $this->originalName = null;
        }
    }
    
    
    public function getFile()
    {
        return $this->file;
    }
    
    
    /**
     * @ORM\PrePersist()
     * @ORM\PreUpdate()
     */
    public function preUpload()
    {
        
        if($this->file === null) {
            return;
        }
        
        $this->extension = $this->file->guessExtension();
        
        $this->originalName = $this->file->getClientOriginalName();
        
        $this->alt = $this->title;
        
        $this->modifiedDate = new \Datetime();
    }
    
    
    /**
     * @ORM\PostPersist()
     * @ORM\PostUpdate()
     */
    public function upload()
    {
        
        $this->modifiedDate = new \Datetime();
        
        if($this->file === null) {
            return;
        }
        
        if($this->createdDate !== null) {
            $date = $this->createdDate;
        } else {
            $date = new \Datetime();
        }
             
        $createdDate = date_format($date, 'Y_m_d');
        
        if($this->tempFilename !== null) {
            $oldFile = $this->getUploadRootDir().'/'.$createdDate.'_'.$this->id.'.'.$this->extension;
            if(file_exists($oldFile)) {
                unlink($oldFile);
            }
        }
        
        $this->file->move(
            $this->getUploadRootDir(),
            $createdDate.'_'.$this->id.'.'.$this->extension
        );
    }
    
    
    /**
     * @ORM\PreRemove()
     */
    public function preRemoveUpload()
    {
        $createdDate = date_format($this->createdDate, 'Y_m_d');
        
        $this->tempFilename = $this->getUploadRootDir().$createdDate.'_'.$this->id.'.'.$this->extension;
    }
    
    
    /**
     * @ORM\PostRemove()
     */
    public function removeUpload()
    {
        if(file_exists($this->tempFilename)) {
            unlink($this->tempFilename);
        }
    }
    
    
    public function getUploadDir()
    {
        return 'uploads/images';
    }
    
    
    protected function getUploadRootDir()
    {
        return __DIR__.'/../../../../web/'.$this->getUploadDir();
    }
    
    public function getWebPath()
    {
        $createdDate = date_format($this->createdDate, 'Y_m_d');
        return $this->getUploadDir().'/'.$createdDate.'_'.$this->id.'.'.$this->extension;
    }
    
    /*************************************/
    /**** Getter setter auto generate ****/
    /*************************************/

}