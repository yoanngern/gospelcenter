<?php

namespace gospelcenter\MediaBundle\Entity;

use Doctrine\ORM\Mapping as ORM;
use Symfony\Component\Validator\Constraints as Assert;

/**
 * Video
 *
 * @ORM\Table(name="video")
 * @ORM\Entity(repositoryClass="gospelcenter\MediaBundle\Entity\VideoRepository")
 * @ORM\HasLifecycleCallbacks
 */
class Video
{
    /**
     * @var integer
     *
     * @ORM\Column(name="id", type="integer")
     * @ORM\Id
     * @ORM\GeneratedValue(strategy="AUTO")
     */
    private $id;

    /**
     * @var string
     *
     * @ORM\Column(name="ownerId", type="string", length=255)
     * @Assert\NotBlank()
     */
    private $ownerId;

    /**
     * @var string
     *
     * @ORM\Column(name="owner", type="string", length=255)
     * @Assert\NotBlank()
     */
    private $owner;

    /**
     * @var string
     *
     * @ORM\Column(name="url", type="string", length=255)
     * @Assert\Url()
     */
    private $url;

    /**
     * @var \DateTime
     *
     * @ORM\Column(name="createdDate", type="datetime")
     * @Assert\DateTime()
     */
    private $createdDate;

    /**
     * @var \DateTime
     *
     * @ORM\Column(name="modifiedDate", type="datetime")
     * @Assert\DateTime()
     */
    private $modifiedDate;


    /**
     * is shown by
     *
     * @ORM\OneToMany(targetEntity="gospelcenter\ArticleBundle\Entity\Article", mappedBy="video")
     * @Assert\Valid()
     */
    private $articles;

    /**
     * is used by
     *
     * @ORM\OneToMany(targetEntity="gospelcenter\EventBundle\Entity\Event", mappedBy="video")
     * @Assert\Valid()
     */
    private $events;

    /**
     * is diffused by
     *
     * @ORM\OneToOne(targetEntity="gospelcenter\CelebrationBundle\Entity\Celebration", mappedBy="video")
     * @Assert\Valid()
     */
    private $celebration;


    /**
     * Constructor
     */
    public function __construct()
    {
        $this->createdDate = new \Datetime();
        $this->modifiedDate = new \Datetime();
        $this->articles = new \Doctrine\Common\Collections\ArrayCollection();
        $this->events = new \Doctrine\Common\Collections\ArrayCollection();
    }

    /**
     * @ORM\PrePersist()
     * @ORM\PreUpdate()
     */
    public function preSave()
    {
        $this->modifiedDate = new \Datetime();

        $hostname = parse_url($this->url)["host"];

        if ($hostname == "www.youtube.com") {
            $this->owner = "youtube";

            $regExp = "/^.*((youtu.be\/)|(v\/)|(\/u\/\w\/)|(embed\/)|(watch\?))\??v?=?([^#\&\?]*).*/";

            preg_match($regExp, $this->url, $matches);

            $this->ownerId = $matches[7];

        } else {
            if ($hostname == "vimeo.com") {
                $this->owner = "vimeo";

                $regExp = "/https?:\/\/(?:www\.)?vimeo.com\/(?:channels\/(?:\w+\/)?|groups\/([^\/]*)\/videos\/|album\/(\d+)\/video\/|)(\d+)(?:$|\/|\?)/";

                preg_match($regExp, $this->url, $matches);

                $this->ownerId = $matches[3];

            }
        }

        if (strpos($hostname, "dailymotion.com") !== false) {
            $this->owner = "dailymotion";

            $regExp = "/^.+dailymotion.com\/(video|hub)\/([^_]+)[^#]*(#video=([^_&]+))?/";

            preg_match($regExp, $this->url, $matches);

            if (count($matches) > 3) {
                $this->ownerId = $matches[4];
            } else {
                $this->ownerId = $matches[2];
            }
        }

    }


    /*************************************/
    /**** Getter setter auto generate ****/
    /*************************************/


}